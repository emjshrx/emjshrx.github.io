{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClockContainer","props","className","style","transform","hourangle","minuteangle","secondangle","ChangeButton","type","App","useState","hourHand","setHourhand","minuteHand","setMinutehand","secondHand","setSecondhand","hourAngle","minuteAngle","secondAngle","useEffect","now","Date","getHours","getMinutes","getSeconds","chooseLocal","interval","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAgDA,SAASA,EAAeC,GACtB,OACE,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAOC,MAAO,CAACC,UAAU,UAAD,OAAYH,EAAMI,UAAlB,UACrC,yBAAKH,UAAU,QAEjB,yBAAKA,UAAU,SAASC,MAAO,CAACC,UAAU,UAAD,OAAYH,EAAMK,YAAlB,UACvC,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,SAASC,MAAO,CAACC,UAAU,UAAD,OAAYH,EAAMM,YAAlB,UAC7C,yBAAKL,UAAU,QACT,yBAAKA,UAAU,QACrB,yBAAKA,UAAU,UAO3B,SAASM,EAAaP,GACpB,OACE,4BAAQC,UAAU,gBAAgBD,EAAMQ,MAe7BC,MAjFf,WAAgB,IAAD,EACkBC,mBAAS,GAD3B,mBACNC,EADM,KACGC,EADH,OAEsBF,mBAAS,GAF/B,mBAENG,EAFM,KAEKC,EAFL,OAGsBJ,mBAAS,GAH/B,mBAGNK,EAHM,KAGKC,EAHL,KAITC,EAAwB,GAAXN,EAA+B,GAAbE,EAAoB,GACnDK,EAA4B,EAAbL,EAA6B,GAAXE,EAAkB,GACnDI,EAA4B,EAAbJ,EAAkB,GAwBrC,OAvBAK,qBAAY,YA+Dd,SAAqBR,EAAYE,EAAcE,GAC7C,IAAIK,EAAM,IAAIC,KACdV,EAAYS,EAAIE,YAChBT,EAAcO,EAAIG,cAClBR,EAAcK,EAAII,cAlEhBC,CAAYd,EAAYE,EAAcE,KACrC,IAGHI,qBAAW,WACP,IAAIO,EAAWC,aAAY,WAC3BZ,EAAcD,EAAa,GACvBA,EAAW,KACbC,EAAc,GACdF,EAAcD,EAAW,IAEvBA,EAAW,KACbC,EAAc,GACdF,EAAYD,EAAS,IAEnBA,EAAS,IACXC,EAAYD,EAAS,MAEtB,KACH,OAAO,kBAAMkB,cAAcF,MAC1B,CAACZ,EAAWF,EAAWF,IAGxB,yBAAKV,UAAU,SACb,4BAAQA,UAAU,gBAAlB,eACA,kBAACF,EAAD,CAAgBK,UAAWa,EAAWZ,YAAaa,EAAaZ,YAAaa,IAC7E,yBAAKlB,UAAU,WACb,kBAACM,EAAD,CAAcC,KAAK,UACnB,kBAACD,EAAD,CAAcC,KAAK,YACnB,kBAACD,EAAD,CAAcC,KAAK,aACnB,kBAACD,EAAD,CAAcC,KAAK,iBC7BPsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6614b7e5.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [hourHand,setHourhand] = useState(0);\n  const [minuteHand,setMinutehand] = useState(0);\n  const [secondHand,setSecondhand] = useState(0);\n  let hourAngle = (hourHand * 30) + (minuteHand * 0.5) + 90 ;\n  let minuteAngle = (minuteHand * 6) +(secondHand*0.1) + 90 ;\n  let secondAngle = (secondHand * 6) + 90 ;\n  useEffect ( () => {\n    chooseLocal(setHourhand,setMinutehand,setSecondhand);\n  }, []\n  )\n  \n  useEffect( () => {\n      let interval = setInterval(() => {\n      setSecondhand(secondHand + 1);\n      if (secondHand>59) {\n        setSecondhand(0);\n        setMinutehand(minuteHand+1);\n      }\n      if (minuteHand>59) {\n        setMinutehand(0);\n        setHourhand(hourHand+1);\n      }\n      if (hourHand>12) {\n        setHourhand(hourHand-12);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [secondHand,minuteHand,hourHand]\n  );\n  return (\n    <div className=\"Clock\">\n      <header className=\"Clock-header\">WORLD CLOCK</header>\n      <ClockContainer hourangle={hourAngle} minuteangle={minuteAngle} secondangle={secondAngle}/>\n      <div className=\"Buttons\">\n        <ChangeButton type=\"Local\" />\n        <ChangeButton type=\"England\" />\n        <ChangeButton type=\"Budapest\" />\n        <ChangeButton type=\"Bengaluru\" />\n      </div>\n    </div>\n  );\n}\n\n\nfunction ClockContainer(props) {\n  return (\n    <div className=\"ClockContainer\">\n        <div className=\"ClockFace\">\n          <div className=\"Hour\" style={{transform: `rotate(${props.hourangle}deg)`}}>\n            <div className=\"hr\"></div>\n          </div>\n          <div className=\"Minute\" style={{transform: `rotate(${props.minuteangle}deg)`}}>\n            <div className=\"mn\"></div>\n          </div><div className=\"Second\" style={{transform: `rotate(${props.secondangle}deg)`}}>\n            <div className=\"sc\"></div>\n            </div><div className=\"Knob\">\n            <div className=\"sc\"></div>\n          </div>\n        </div> \n      </div>   \n  );\n}\n\nfunction ChangeButton(props) {\n  return (\n    <button className=\"ChangeButton\">{props.type}</button>\n  );\n}\n\nfunction chooseLocal(setHourhand,setMinutehand,setSecondhand){\n  var now = new Date();\n  setHourhand(now.getHours());\n  setMinutehand(now.getMinutes());\n  setSecondhand(now.getSeconds());\n}\n\n//http://worldtimeapi.org/api/timezone/Europe/Budapest\n//http://worldtimeapi.org/api/timezone/Europe/London\n//http://worldtimeapi.org/api/timezone/Asia/Kolkata\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}