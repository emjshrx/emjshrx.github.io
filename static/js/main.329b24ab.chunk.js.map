{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClockContainer","props","hands","hourHand","minuteHand","secondHand","setters","setSecondhand","setMinutehand","setHourhand","hourAngle","minuteAngle","secondAngle","useEffect","interval","setInterval","clearInterval","className","style","transform","ButtonSet","setLocation","Locationactive","ChangeButton","type","onClick","color","chooseLocal","now","Date","getHours","getMinutes","getSeconds","App","useState","location","locationactive","setLocationactive","request","XMLHttpRequest","open","onload","data","JSON","parse","this","response","beg","search","hr","parseInt","mn","sc","send","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.329b24ab.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [hourHand,setHourhand] = useState(0);\n  const [minuteHand,setMinutehand] = useState(0);\n  const [secondHand,setSecondhand] = useState(0);\n  const [location,setLocation] = useState('Local');\n  const [locationactive,setLocationactive] = useState('Local');\n\n  useEffect ( () => {\n    chooseLocal(setHourhand,setMinutehand,setSecondhand);\n  }, []\n  )\n\n  useEffect(() => {\n    \n    if (location==='Local') {\n      chooseLocal(setHourhand,setMinutehand,setSecondhand);\n      setLocationactive(location);\n    }\n    else {\n\n    \n      var request = new XMLHttpRequest()\n\n      switch(location) {\n        case 'Bengaluru':  \n        request.open('GET', 'https://worldtimeapi.org/api/timezone/Asia/Kolkata', true);\n        break;\n        case 'Budapest':  \n        request.open('GET', 'https://worldtimeapi.org/api/timezone/Europe/Budapest', true);\n        break;\n        case 'London':  \n        request.open('GET', 'https://worldtimeapi.org/api/timezone/Europe/London', true);\n        break;\n        default:\n      }\n        request.onload = function () {\n          // Begin accessing JSON data here\n          var data = JSON.parse(this.response)\n          \n          const beg = data['datetime'].search('T');\n          let hr = data['datetime'][beg+1] + data['datetime'][beg+2];\n          hr = parseInt(hr);\n          let mn = data['datetime'][beg+4] + data['datetime'][beg+5];\n          mn = parseInt(mn);\n          let sc = data['datetime'][beg+7] + data['datetime'][beg+8];\n          sc = parseInt(sc);\n\n          setHourhand(hr);\n          setMinutehand(mn);\n          setSecondhand(sc);\n          setLocationactive(location);\n          }\n        // Send request\n        request.send();\n\n        }\n    \n  },[location]\n  )\n  \n  return (\n    <div className=\"Clock\">\n      <header className=\"Clock-header\">WORLD CLOCK</header>\n      <ClockContainer hands={[hourHand,minuteHand,secondHand]} setters={[setSecondhand,setMinutehand,setHourhand]}/>\n      <ButtonSet setLocation={setLocation} Locationactive={locationactive}/>\n    </div>\n  );\n}\n\n\nfunction ClockContainer(props) {\n  const [hourHand,minuteHand,secondHand] = props.hands ;\n  const [setSecondhand,setMinutehand,setHourhand] = props.setters;\n  let hourAngle = (hourHand * 30) + (minuteHand * 0.5) + 90 ;\n  let minuteAngle = (minuteHand * 6) +(secondHand*0.1) + 90 ;\n  let secondAngle = (secondHand * 6) + 90 ;\n  useEffect( () => {\n    let interval = setInterval(() => {\n    setSecondhand(secondHand + 1);\n    if (secondHand>59) {\n      setSecondhand(0);\n      setMinutehand(minuteHand+1);\n    }\n    if (minuteHand>59) {\n      setMinutehand(0);\n      setHourhand(hourHand+1);\n    }\n    if (hourHand>12) {\n      setHourhand(hourHand-12);\n    }\n  }, 1000);\n    return () => clearInterval(interval);\n  }, [secondHand,minuteHand,hourHand]\n  );\n  \n  return (\n    <div className=\"ClockContainer\">\n        <div className=\"ClockFace\">\n          <div className=\"Hour\" style={{transform: `rotate(${hourAngle}deg)`}}>\n            <div className=\"hr\"></div>\n          </div>\n          <div className=\"Minute\" style={{transform: `rotate(${minuteAngle}deg)`}}>\n            <div className=\"mn\"></div>\n          </div>\n          <div className=\"Second\" style={{transform: `rotate(${secondAngle}deg)`}}>\n            <div className=\"sc\"></div>\n          </div>\n          <div className=\"Knob\">\n            <div className=\"sc\"></div>\n          </div>\n        </div> \n      </div>   \n  );\n}\n\nfunction ButtonSet ({setLocation, Locationactive}) {\n  return (\n    <div className=\"Buttons\">\n        <ChangeButton type=\"Local\" setLocation={setLocation} Locationactive={Locationactive}/>\n        <ChangeButton type=\"London\" setLocation={setLocation} Locationactive={Locationactive}/>\n        <ChangeButton type=\"Budapest\" setLocation={setLocation} Locationactive={Locationactive}/>\n        <ChangeButton type=\"Bengaluru\" setLocation={setLocation} Locationactive={Locationactive}/>\n      </div>\n  )\n}\n\nfunction ChangeButton(props) {\n  return (\n    <button className=\"ChangeButton\" onClick={() => {props.setLocation(props.type)}} style={{color: `${props.Locationactive==props.type? '#ff7070': ''}` }}>{props.type}</button>\n  );\n}\n\nfunction chooseLocal(setHourhand,setMinutehand,setSecondhand){\n  var now = new Date();\n  setHourhand(now.getHours());\n  setMinutehand(now.getMinutes());\n  setSecondhand(now.getSeconds());\n}\n\n//http://worldtimeapi.org/api/timezone/Europe/Budapest props.setLocation(props.type)\n//http://worldtimeapi.org/api/timezone/Europe/London\n//http://worldtimeapi.org/api/timezone/Asia/Kolkata\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}